Grammar

    0 $accept: input $end

    1 input: ε
    2      | input line

    3 line: '\n'
    4     | expr '\n'
    5     | error '\n'

    6 expr: "string"
    7     | expr expr FRAC
    8     | expr expr '^'
    9     | expr expr '_'
   10     | expr expr '&'
   11     | expr expr '+'
   12     | expr ')'
   13     | INT


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 3 4 5
    '&' (38) 10
    ')' (41) 12
    '+' (43) 11
    '^' (94) 8
    '_' (95) 9
    error (256) 5
    "string" <char*> (258) 6
    FRAC (259) 7
    INT (260) 13


Nonterminals, with rules where they appear

    $accept (12)
        on left: 0
    input (13)
        on left: 1 2
        on right: 0 2
    line (14)
        on left: 3 4 5
        on right: 2
    expr <char*> (15)
        on left: 6 7 8 9 10 11 12 13
        on right: 4 7 8 9 10 11 12


State 0

    0 $accept: • input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input • $end
    2 input: input • line

    $end      shift, and go to state 2
    error     shift, and go to state 3
    "string"  shift, and go to state 4
    INT       shift, and go to state 5
    '\n'      shift, and go to state 6

    line  go to state 7
    expr  go to state 8


State 2

    0 $accept: input $end •

    $default  accept


State 3

    5 line: error • '\n'

    '\n'  shift, and go to state 9


State 4

    6 expr: "string" •

    $default  reduce using rule 6 (expr)


State 5

   13 expr: INT •

    $default  reduce using rule 13 (expr)


State 6

    3 line: '\n' •

    $default  reduce using rule 3 (line)


State 7

    2 input: input line •

    $default  reduce using rule 2 (input)


State 8

    4 line: expr • '\n'
    7 expr: expr • expr FRAC
    8     | expr • expr '^'
    9     | expr • expr '_'
   10     | expr • expr '&'
   11     | expr • expr '+'
   12     | expr • ')'

    "string"  shift, and go to state 4
    INT       shift, and go to state 5
    '\n'      shift, and go to state 10
    ')'       shift, and go to state 11

    expr  go to state 12


State 9

    5 line: error '\n' •

    $default  reduce using rule 5 (line)


State 10

    4 line: expr '\n' •

    $default  reduce using rule 4 (line)


State 11

   12 expr: expr ')' •

    $default  reduce using rule 12 (expr)


State 12

    7 expr: expr • expr FRAC
    7     | expr expr • FRAC
    8     | expr • expr '^'
    8     | expr expr • '^'
    9     | expr • expr '_'
    9     | expr expr • '_'
   10     | expr • expr '&'
   10     | expr expr • '&'
   11     | expr • expr '+'
   11     | expr expr • '+'
   12     | expr • ')'

    "string"  shift, and go to state 4
    FRAC      shift, and go to state 13
    INT       shift, and go to state 5
    '^'       shift, and go to state 14
    '_'       shift, and go to state 15
    '&'       shift, and go to state 16
    '+'       shift, and go to state 17
    ')'       shift, and go to state 11

    expr  go to state 12


State 13

    7 expr: expr expr FRAC •

    $default  reduce using rule 7 (expr)


State 14

    8 expr: expr expr '^' •

    $default  reduce using rule 8 (expr)


State 15

    9 expr: expr expr '_' •

    $default  reduce using rule 9 (expr)


State 16

   10 expr: expr expr '&' •

    $default  reduce using rule 10 (expr)


State 17

   11 expr: expr expr '+' •

    $default  reduce using rule 11 (expr)
